<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wook's Lab</title>
    <description>Interesting things</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 06 Jun 2020 15:15:36 +0900</pubDate>
    <lastBuildDate>Sat, 06 Jun 2020 15:15:36 +0900</lastBuildDate>
    <generator>Jekyll v3.6.0</generator>
    
      <item>
        <title>A New Sampmle Post</title>
        <description>&lt;p&gt;Hi, my name is Sangwook Cheon.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/posts/a-new-post</link>
        <guid isPermaLink="true">http://localhost:4000/posts/a-new-post</guid>
        
        <category>howto</category>
        
        
      </item>
    
      <item>
        <title>Reflecting on the</title>
        <description>&lt;p&gt;Damn.&lt;/p&gt;
</description>
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/posts/jis-leadweek-reflection</link>
        <guid isPermaLink="true">http://localhost:4000/posts/jis-leadweek-reflection</guid>
        
        <category>howto</category>
        
        <category>jis</category>
        
        
      </item>
    
      <item>
        <title>Paradox of Computers for People in Need</title>
        <description>&lt;p&gt;“I have a little announcement,” I said.&lt;/p&gt;

&lt;p&gt;It was a regular lunch meeting for my
service club. I pulled out my MacBook,
walked to the podium—an English
classroom is our venue—and began
talking.&lt;/p&gt;

&lt;p&gt;“I am happy you had fun in AlHurriyah! If you couldn’t go, we all can
revisit the school sometime. Sixty fifthgraders greeted us, and we checked if
there is a vacant room for computers.”&lt;/p&gt;

&lt;p&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;p&gt;“Sixty?” Some gasped in unison.&lt;/p&gt;

&lt;p&gt;“Exactly. We can teach more than
sixty, or even the whole school.
Sugata Mitra’s ‘Hole in the Wall’
experiment proved the power of a
single computer.”&lt;/p&gt;

&lt;p&gt;“But I want to share another story.
Last week, there was a three-hour trip
to a hilly village in Sentul. One girl I
met is re-reading her old comic books
because school is too far away.”&lt;/p&gt;

&lt;p&gt;Our advisor raised his eyebrows. I
took a breath and continued.&lt;/p&gt;

&lt;p&gt;“Here’s the dilemma: five computers
for ten out-of-school children in the
village or five-hundred students in AlHurriyah. What’s better?”&lt;/p&gt;

&lt;p&gt;Silence.&lt;/p&gt;

&lt;p&gt;“Managing computers located threehours away would be hard, though.”
one member commented.&lt;/p&gt;

&lt;p&gt;“Definitely. But here’s a plan called
‘Computer Drive.’ Like a delivery
service…” I spoke for another ten
minutes, but I knew I lost the
audience.&lt;/p&gt;

&lt;p&gt;The dilemma, in fact, left me clueless
for days. After researching and
thinking, I passionately supported the
school-less children. Although it didn’t
pass, it was a profound battle between
many and few, far and near, and
ultimately, my values and experiences
of others.&lt;/p&gt;

&lt;p&gt;Is this dilemma ever answerable?&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Feb 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/posts/plugged-in-paradox-of-computers</link>
        <guid isPermaLink="true">http://localhost:4000/posts/plugged-in-paradox-of-computers</guid>
        
        <category>howto</category>
        
        <category>jis</category>
        
        
      </item>
    
      <item>
        <title>Adding Latitude and Longitude given a location using Geocoder library</title>
        <description>&lt;h1 id=&quot;about-geocoder&quot;&gt;About Geocoder&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://geocoder.readthedocs.io/&quot;&gt;Geocoder&lt;/a&gt; is a python library that enables us to get Latitude and Longitude value given an address anywhere in the world. I will work with the cleaned dataset I created with Beautiful soup from this &lt;a href=&quot;https://sangwookcheon.github.io/2019/07/12/web-scraping-using-beautiful-soup/&quot;&gt;article&lt;/a&gt;. I will add Latitude and Longitude coordinates to each Postal Code.&lt;/p&gt;

&lt;p&gt;It is important to note that Geocoder library can sometimes be inconsistent, returning ‘None’ instead of coordinates. This library is free-of-charge, but you might want to use a more stable but paid service like &lt;a href=&quot;https://developers.google.com/maps/documentation/geocoding/start&quot;&gt;Google Geocoding API&lt;/a&gt;. For this task, using Geocoder library is enough.&lt;/p&gt;

&lt;p&gt;&amp;lt;!–-break-–&amp;gt;&lt;/p&gt;

&lt;p&gt;First let’s import Geocoder library and other tools:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;geocoder&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pd&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here are the first 10 rows of my cleaned table. In total, there are 103 rows, meaning that there are 103 unique postal codes.&lt;/p&gt;

&lt;p&gt;We first need to initialize lat-long coordinates to be an empty list, which will be filled for each postal code and added to the table. We also need to get postal codes from the table.&lt;/p&gt;

&lt;p&gt;I stored the clean data table as &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; by using &lt;code class=&quot;highlighter-rouge&quot;&gt;read_csv&lt;/code&gt; function of Pandas.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# initialize variable to None&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lat_lng_coords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;postal_codes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'PostalCode'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now is the part where I loop until coordinates are derived from the &lt;code class=&quot;highlighter-rouge&quot;&gt;geocoder.google&lt;/code&gt; function, and then add it to the original table.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# loop until we get the coordinates&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postal_codes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lat_lng_coords&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;geocoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{}, Toronto, Ontario'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lat_lng_coords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latlng&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lat_lng_coords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;latitude&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lat_lng_coords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;longitude&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lat_lng_coords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Latitude'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latitude&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Longitude'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;longitude&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#Re-initialize the variable.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lat_lng_coords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Doing this might take some time, because there is loading time when getting coordinates. When finished, now there is an updated table with two new columns, named &lt;code class=&quot;highlighter-rouge&quot;&gt;latitude&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;longitude&lt;/code&gt;, as shown below:
&lt;img src=&quot;/in-post-images/Screen Shot 2019-07-13 at 11.45.23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;recap&quot;&gt;Recap&lt;/h1&gt;
&lt;p&gt;Geocoder library can be used to get latitude and longitude values using a street address. This library is free-of-charge, but can sometimes be inconsistent in yielding results.&lt;/p&gt;

&lt;p&gt;Getting coordinates is important in many applications, such as putting marks on trending places on a map and clustering places based on their latitude and longitude values.&lt;/p&gt;

&lt;p&gt;Here is a &lt;a href=&quot;https://github.com/SangwookCheon/non-e-stop-python-data-science/blob/master/Machine-Learning/Example%20Projects/IBM%20Capstone%20Project/add_latlon.ipynb&quot;&gt;link to Jupyter Notebook&lt;/a&gt; for this article.&lt;/p&gt;

&lt;p&gt;You can also learn about Foursquare API, a map-related API with many social features, by referring to &lt;a href=&quot;https://github.com/SangwookCheon/non-e-stop-python-data-science/blob/master/Machine-Learning/Example%20Projects/IBM%20Capstone%20Project/foursquare_api_exploration.ipynb&quot;&gt;this notebook&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Jul 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/posts/adding-latitude-longitude-geocoder</link>
        <guid isPermaLink="true">http://localhost:4000/posts/adding-latitude-longitude-geocoder</guid>
        
        <category>howto</category>
        
        
      </item>
    
  </channel>
</rss>
